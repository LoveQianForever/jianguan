<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx.xsd">
 
	<!-- C3P0 数据源 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${hibernate.connection.driver_class}"/> 
        <property name="jdbcUrl" value="${hibernate.connection.url}"/>
        <property name="automaticTestTable" value="Test"/><!--c3p0将建一张名为Test的空表，并使用其自带的查询语句进行测试。如果定义了这个参数那么 
															属性preferredTestQuery将被忽略。你不能在这张Test表上进行任何操作，它将只供c3p0测试 
																使用。Default: null--> 
        <property name="minPoolSize" value="1"/>
        <property name="maxPoolSize" value="50"/><!--连接池中保留的最大连接数。Default: 15 --> 
        <property name="initialPoolSize" value="3"/><!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
        <property name="maxIdleTime" value="15000"/><!--最大空闲时间,25000秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 --> 
        <property name="acquireIncrement" value="1"/><!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 --> 
        <property name="acquireRetryAttempts" value="30"/><!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 --> 
        <property name="acquireRetryDelay" value="1000"/><!--两次连接中间隔时间，单位毫秒。Default: 1000 --> 
        <property name="testConnectionOnCheckin" value="true"/><!--如果设为true那么在取得连接的同时将校验连接的有效性。Default: false --> 
        <property name="idleConnectionTestPeriod" value="18000"/><!--每18000秒检查所有连接池中的空闲连接。Default: 0 -->
        <property name="checkoutTimeout" value="5000"/><!--当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出 
																SQLException,如设为0则无限期等待。单位毫秒。Default: 0 --> 
        <property name="properties"> 
            <props> 
                <prop key="user">${hibernate.connection.username}</prop>
                <prop key="password">${hibernate.connection.password}</prop>
            </props> 
        </property>
    </bean>
    
    <!-- SessionFactory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="com.ncs.gsyt.modules.model"/>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>	
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
			</props>
		</property>
	</bean>
	
	<!-- 配置事务管理 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<!-- 配置注解实现管理事务（cglib：proxy-target-class="true"） -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	
	<!-- 指定使用cglib -->
	<!-- <aop:aspectj-autoproxy proxy-target-class="true" />  -->
	
	<!-- 配置事务的传播特性 -->
	<!-- 
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="edit*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="batchUpdate" propagation="REQUIRED" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	-->
	
	<!-- 配置事务的切入点 -->
	<!-- 
	<aop:config>
		<aop:pointcut id="targetMethod" expression="execution(* com.oa.mobile.modules..service.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="targetMethod" />
	</aop:config>
	-->
	
</beans>